const main=async()=>{const e=MineTm.Mine,t={lastDeletedChatTitleKey:"mine-last-deleted-chat-title",lastDeletedChatEntryKey:"mine-last-deleted-chat-entry",updateChatData:async(e,n)=>await t._withIndexeddbStore("readwrite",t=>t.put(n,`CHAT_${e}`)),getChatData:async e=>(await t._withIndexeddbStore("readonly",t=>t.get(`CHAT_${e}`))).target.result,backupCurrentChatEphemerally:async()=>{const e=MineTm.getCurrentChatId(),n=await MineTm.getChatIndexedDbValueAsync(e);if(!n)throw"cant get current chat data";const a=JSON.stringify(n);try{sessionStorage.setItem(t.lastDeletedChatEntryKey,a),sessionStorage.setItem(t.lastDeletedChatTitleKey,n.chatTitle)}catch(e){if("QuotaExceededError"!==e.name)throw e;if(!confirm("Chat too large for backup. Proceed without backup?"))return!1}return!0},deleteCurrentChat:async()=>{if(!await t.backupCurrentChatEphemerally())return e.toastWarning("[noop] backup failed");const n=MineTm.getCurrentChatId();if(await MineTm.deleteChatIndexedDbValueAsync(n),MineTm.isMobile)return e.toastSuccess("Deleted. Refreshing tab..."),await e.sleep(1e3),void window.location.reload();e.Extension.closeTab()},getLastDeletedChatTitle:()=>sessionStorage.getItem(t.lastDeletedChatTitleKey),isThereARecoverableChat:()=>!!t.getLastDeletedChatTitle(),recoverDeletedChat:async()=>{const n=sessionStorage.getItem(t.lastDeletedChatEntryKey);if(!n)throw"no recoverable chat";const a=JSON.parse(n),s=a.chatID;if(await MineTm.getChatIndexedDbValueAsync(s)&&!confirm("Recoverable chat already exists. Overwrite?"))throw"recoverable chat already exists";let i=!1;await MineTm.setChatIndexedDbValueAsyncLegacy(s,a).catch(()=>i=!0),i?e.toastError("error saving recovered data"):MineTm.goToChatIdWithHardReload(s,!0)},getResponseBlocksWithSelection:()=>{const e=window.getSelection();if(!e?.rangeCount)return[];const t=e.getRangeAt(0),n=1===t.startContainer?.nodeType?t.startContainer:t.startContainer?.parentElement,a=1===t.endContainer?.nodeType?t.endContainer:t.endContainer?.parentElement;if(!n||!a)return[];const s=n.closest('[data-element-id="response-block"]'),i=a.closest('[data-element-id="response-block"]');if(!s||!i)return[];if(s===i)return[s];const o=[];let r=s,l=0;for(;r&&l<1e3&&(o.push(r),r!==i);){let e=r;do{e=e.nextElementSibling}while(e&&!e.matches('[data-element-id="response-block"]'));if(!e){let t=r.parentElement;for(;t&&!t.nextElementSibling;)t=t.parentElement;e=t?.nextElementSibling?.querySelector('[data-element-id="response-block"]')}if(!e)break;r=e,l++}return o},getResponseBlockWithSelection:()=>{const e=window.getSelection();if(e.rangeCount>0){let t=e.getRangeAt(0).commonAncestorContainer;for(;t&&1!==t.nodeType;)t=t.parentNode;return t.closest('[data-element-id="response-block"]')}return null},getAllIndexedDbItems:(e,t)=>new Promise((n,a)=>{const s=indexedDB.open(e);s.onupgradeneeded=()=>{s.result.createObjectStore(t)},s.onsuccess=()=>{const e=s.result.transaction(t,"readonly").objectStore(t).getAll();e.onsuccess=()=>n(e.result),e.onerror=()=>a(e.error)},s.onerror=e=>a(e.target.error)}),_withIndexeddbStore:async(e,t)=>new Promise((n,a)=>{const s=indexedDB.open("keyval-store");s.onerror=e=>a(e),s.onsuccess=s=>{const i=s.target.result,o=i.transaction("keyval",e),r=o.objectStore("keyval"),l=t(r);l.onerror=e=>a(e),l.onsuccess=e=>n(e),o.oncomplete=()=>i.close()}}),openModelMenuItemAsync:async t=>{(await e.waitForQs('.pb-1 button[aria-haspopup="menu"]')).click(),(await e.waitFor(()=>e.qsaa('[id^="headlessui-menu-item"][role="menuitem"]').find(e=>e.innerText.toLowerCase()===t.toLowerCase()))).click()}};MineTm.TmCbHelper=t;const n='\n"""⚙️ Fix/polish the code\n* no console logs unless absolutely necessary (and dont leak anything sensitive)\n* no unnecessary try catch\n* no unnecessary parenthesis/brackets\n* no unnecessary comments (but preserve mine). do not repeat implementation details in comments\n* prefer fat arrow notation\n* prefer clear explicit naming (with type suffix if in untyped environment)\n* use semicolons and such\n* 2-space indents\n* favor early returns\n* favor trailing commas\n* readable variable names, favoring const (for JS)\n* inline simple returns (for JS)\n* DRY, modular code\n* simplified\n* keep all contextual instructions/comments about integrating the code OUTSIDE of the code block\n* if I gave you code, then try to have minimal changes to what I provided\n"""\n'.trim(),a='\n"""⚙️ Fix/polish the language\n* write it in code block\n* philosophy: iron fist in velvet glove (be matter of fact, while being polite)\n* be as concise as possible without losing efficacy\n* philosophy: minimize vulnerabilities\n* philosophy (within reason): minimize intel we provide (and minimize our obligations)\n"""\n'.trim(),s="/",i="/.*chat";MineTm.CommandBarPlatforms={DESKTOP:"DESKTOP",MOBILE:"MOBILE"};const o=async(t,n,a)=>{const s=t.messages[n];if("user"!==s.role)return void e.toastError("[noop] Only support starting from user message");const i=t.messages.findIndex((e,t)=>t>n&&"assistant"===e.role);if(i<0)return void e.toastError("[noop] No AI response found after summarization request starting message");a?.setStatus("awaiting ai summarization");const o=`\n"""Starting message\n${MineTm.getIdbeMessageObjText(s).split("\n").map(e=>`> ${e}`).join("\n")}\n"""\n\n${((e=!1)=>`"""Summarization instructions\nSummarize our discourse${e?"":" starting from this quoted message"}. Seeking to "compress" the chat history by replacing all messages${e?"":" since quoted message"} with the key points (especially things I resonated/engaged with) to increase the information density of this chat. Response should have high information density, and can be as long as necessary to cover the content being covered.${e?" If the chat contains summaries of further previous chats, include a summary of that too.":""}\n\nAlso quote key things either of us said, or any takeaways.\nIf the session resulted in any artifacts, reproduce all final results. If the session referenced any special tokens, values, or keys, record those for future reference.\n\nUse markdown to make it readable.\nDo not include this specific summarization request message in your response.\n"""`)()}`.trim();await MineTm.sendMessageAsync(o),await MineTm.waitForCompletedMsgCountAsync(t.messages.length+2,3e5),await e.waitFor(()=>!MineTm.getIsAiResponding()),await MineTm.scrollToLastMsgAsync(),a?.setStatus("");const r=MineTm.getCurrentChatId(),l=(await MineTm.getCurrentChatIdbMetaAsync()).idbe.messages.slice(-1)[0],c=MineTm.getIdbeMessageObjText(l),m=t.messages.slice(n),d=await MineTm.ChatDecompressionsManager.storeTranscriptFragmentViaMutation(t,m);t.messages[n].content=MineTm.getCompressionSummaryPromptBlock(t.messages.length-n,{uncompressedChatsRefId:d});const u=i-n;u>1&&t.messages.splice(n+1,u-1);const h=t.messages[n+1];MineTm.setIdbeMessageObjText(h,c),h.tool_calls&&delete h.tool_calls,t.messages.splice(n+2),await MineTm.setChatIndexedDbValueAsyncLegacy(r,t),window.location.reload()},r=()=>{const t=e.qs(".mine_notes"),n=t.value.split(/\n\s*\n+/).filter(e=>e.trim());return n.length?(e.updateReactTypableFormValue(t,n.slice(1).join("\n\n")),n[0].trim()):""},l=async e=>!!e&&(await MineTm.sendMessageAsync(e,{append:!0}),!0),c=(e,t,n="[Redacted notes - stale]")=>{if(!e.includes(t.trim()))return{output:e,wasRedactionPerformed:!1,redactedContent:null};const a=e.split("\n"),s=[],i=[];let o=!1,r=!1;return a.forEach(e=>{if(e.trim()===t.trim())return o=!0,s.push(n),i.push(e),void(r=!0);if(o){if(e.match(/^\s*/)[0].length>0)return void i.push(e);o=!1}s.push(e)}),{output:s.join("\n"),wasRedactionPerformed:r,redactedContent:i.join("\n")}};if(MineTm.originalMineCommandBar=MineTm.Mine.CommandBar,MineTm.isMobile){const t={init(){const e=document.createElement("style");e.textContent="\n          #command-overlay {\n            position: fixed;\n            top: 0;\n            left: 0;\n            right: 0;\n            bottom: 0;\n            background: rgba(0,0,0,0);\n            z-index: 9999;\n            display: none;\n            opacity: 0;\n            transition: all 0.2s;\n          }\n          .status-bar {\n            position: absolute;\n            padding: 8px 16px 15px;\n            background: #222222;\n            color: #929292;\n            border-radius: 6px;\n            font-size: 14px;\n            z-index: -1;\n            overflow: hidden;\n            width: 100%;\n            transform: translateY(calc(-100% + 12px));\n          }\n\n          #command-overlay.visible {\n            opacity: 1;\n            background: rgba(0,0,0,0.8);\n          }\n\n          .command-container {\n            position: absolute;\n            top: 18%;\n            left: 50%;\n            transform: translateX(-50%) translateY(-10px);\n            width: 90%;\n            max-width: 600px;\n            opacity: 0;\n            transition: all 0.2s;\n          }\n\n          #command-overlay.visible .command-container {\n            opacity: 1;\n            transform: translateX(-50%) translateY(0);\n          }\n\n          #command-input {\n            width: 100%;\n            padding: 12px;\n            font-size: 16px;\n            border: none;\n            border-top: 1px solid dimgray;\n            border-radius: 8px;\n            background: #1a1a1a;\n            color: #fff;\n            box-shadow: 0 4px 12px rgba(0,0,0,0.2);\n            transition: box-shadow 0.15s ease;\n          }\n\n          #command-input::placeholder {\n            color: #666;\n          }\n\n          #command-input:focus {\n            outline: none;\n            box-shadow: 0 6px 16px rgba(0,0,0,0.3);\n          }\n\n          #command-results {\n            margin-top: 8px;\n            background: #1a1a1a;\n            border-radius: 8px;\n            max-height: 300px;\n            overflow-y: auto;\n            box-shadow: 0 4px 12px rgba(0,0,0,0.2);\n            position: relative;\n            z-index: 2;\n            opacity: 0;\n            transition: opacity 0.15s ease;\n          }\n\n          #command-overlay.visible #command-results {\n            opacity: 1;\n          }\n\n          .command-result {\n            padding: 12px;\n            cursor: pointer;\n            color: #fff;\n            transition: background 0.2s ease;\n          }\n\n          .command-result:hover {\n            background: #2a2a2a;\n          }\n\n          .command-result.selected {\n            background: #333;\n            position: relative;\n            z-index: 1;\n          }\n        ",document.head.appendChild(e);const t=document.createElement("div");t.id="command-overlay",t.innerHTML='\n          <div class="command-container">\n            <div class="status-bar"></div>\n            <input type="text" id="command-input" placeholder="Command..." />\n            <div id="command-results"></div>\n          </div>\n        ',document.body.appendChild(t),this._commands=[],this._getCommandsAsync=null,this.isVisible=!1,this.selectedIdx=0;const n=document.getElementById("command-input");t.addEventListener("click",e=>{document.querySelector(".command-container").contains(e.target)||this.close()}),n.addEventListener("input",()=>this.filterCommands(n.value)),n.addEventListener("keydown",e=>this.handleKeydown(e)),n.addEventListener("blur",()=>this.close()),document.getElementById("command-results").addEventListener("click",async e=>{const t=e.target.closest(".command-result");if(t){const e=t.dataset.title;await this.runCommandWithTitle(e)}})},async runCommandWithTitle(t){const n=this._commands.find(e=>e.title===t);if(n){this.close(),await e.sleep(200);try{await n.run({getShouldInterruptAsync:()=>!1,setStatus:e.noop})}catch(t){e.toastError("Error running command")}}},serveGetCommandsFnAsync(e){this._getCommandsAsync=e,this.refreshCommandsAsync()},async refreshCommandsAsync(){this.isVisible&&this.filterCommands(this.getInputValue())},async open(){if(this.isVisible)return;const e=document.getElementById("command-overlay");e.style.display="block";const t=document.getElementById("command-input");t.focus();const n=await this._getCommandsAsync();this._commands=n.filter(e=>e.run).filter(e=>MineTm.originalMineCommandBar.isCurrentUrlMatchedByPattern(e.site)).filter(e=>!e.unsupportedPlatforms||!e.unsupportedPlatforms.includes(MineTm.CommandBarPlatforms.MOBILE));const a=n.find(e=>e.isStatusBar);this._statusTitle=a?.title,this._statusSubtitle=a?.subtitle;const s=document.querySelector(".status-bar");s.textContent=this._statusTitle?`🖤 ${this._statusTitle}`:"",s.textContent+=this._statusSubtitle?`\n${this._statusSubtitle}`:"",s.style.display=this._statusTitle?"block":"none",s.style.whiteSpace="pre-line",document.getElementById("command-results").scrollTop=0,requestAnimationFrame(()=>e.classList.add("visible")),this.isVisible=!0,t.value="",this.selectedIdx=0,this.filterCommands("")},close(){if(!this.isVisible)return;const e=document.getElementById("command-overlay");e.classList.remove("visible"),this.isVisible=!1,setTimeout(()=>{this.isVisible||(e.style.display="none")},200)},toggle(){this.isVisible?this.close():this.open()},getInputValue:()=>document.getElementById("command-input").value,filterCommands(e){if(!this._commands)return;const t=e.toLowerCase(),n=[];if(e.length){const e=[],a=[];this._commands.forEach(n=>{const s=n.hotkeySequence?.replace(/\+/g,"").toLowerCase();s?.startsWith(t)?e.push(n):n.title.toLowerCase().includes(t)&&a.push(n)}),e.sort((e,t)=>e.hotkeySequence.length-t.hotkeySequence.length),n.push(...e,...a)}else n.push(...this._commands);document.getElementById("command-results").innerHTML=n.map((e,t)=>`\n            <div class="command-result ${t===this.selectedIdx?"selected":""}" data-title="${e.title}">\n              ${e.title}\n              <div style="font-size: 12px; color: #666; margin-top: 4px;">${e.hotkeySequence?`[${e.hotkeySequence}]`:""}${e.subtitle?` ${e.subtitle}`:""}</div>\n            </div>\n          `).join("")},async handleKeydown(e){if("Enter"!==e.key)return;e.preventDefault();const t=document.querySelector(".command-result.selected");if(!t)return;const n=t.dataset.title;await this.runCommandWithTitle(n)}};e.CommandBar=t,e.CommandBar.init()}const m=async(n={})=>{const{idbe:a}=await MineTm.getCurrentChatIdbMetaAsync();if(!a)return e.toastWarning("Current chat not found in DB");let s=!0;const i=a.messages.filter(e=>"user"===e.role),o=i.map(e=>MineTm.getIdbeMessageObjText(e)).join("\n").split("\n").length,r=i.length;(o<50||r<15||!0===n.triggerEvent?.shiftKey)&&(s=!1);const l=Date.now()-new Date(a.createdAt).getTime(),c=MineTm.formatDurationLabel(l),m=a.messages.filter(e=>e.isPinned).length;m&&(s=!0);const d=[`"${document.title}"`,`you sent ${o} lines (over ${r} msgs)`,`chat made ${c} ago`,m?`${m} pinned`:""].filter(Boolean).map(e=>`* ${e}`).join("\n");s&&!confirm(`Are you sure you want to delete this chat and exit?\n\n${d}`)||await t.deleteCurrentChat()};MineTm.getDetailedSummarizationViaPrompt=async(t=e.noop,{attachment:n=null,startMsgIdx:a=0,maybeCbConfig:s}={})=>{const i=await MineTm.getTaAsync();if(i.value.trim().length)throw e.toastWarning("Text input must be clear"),"text input must be clear";const o=(await MineTm.getCurrentChatIdbMetaAsync()).idbe,r=o.messages.length;let l=o.messages.length;const c=(new Date).toLocaleString("en-US",{month:"2-digit",day:"2-digit",year:"2-digit",hour:"numeric",minute:"2-digit",hour12:!0}),m="MESSAGE_TRUNCATED",d=a?`\n"""Summarization Starting Point (only cover things starting from here)\n${MineTm.getIdbeMessageObjText(o.messages[a]).split("\n").map(e=>`> ${e}`).join("\n")}\n"""\n\n`:"",u=d+e.normalizeSpaceIndents(`\n      Okay, we discussed a lot. I need to condense this chat. I want to preserve maximum context fidelity so you remember full context after I condense it.\n\n      This is kind of meta, but here's the generic prompt I was going to send you. Please update this high level prompt with the purpose of compelling you to produce an amazing high-information report and return the updated prompt in one code block. You must produce something and do so in entirety. Do NOT generate the actual report, just update the prompt to be more effective. Keep it somewhat simple.\n\n      """\n      [System note — ${c}]\n      Let's compress this chat. Generate a comprehensive, high-information-density report of all critical discussions, strategic frameworks, and tactical developments covered so far. Include rich details for anything explicitly called out as important. Consider the ENTIRE chat${d?" starting from the provided Starting Point":""}, not just recent stuff. You do not need to restate things from the system prompt (that will be copied over to the new chat).\n\n      This report will become your only memory of that previous conversation section, as everything ${d?"starting from the Starting Point":"before this message"} will be deleted. The system prompt will carry over though.\n\n      Guidelines for the report:\n      * Maintain mission goal/objectives\n      * Maintain rich narrative detail\n      * Preserve specific numbers, quotes, and key insights\n      * Include all mission-critical information\n      * AVOID SHALLOW BULLET POINTS. Prefer high information-density sentences to soak up the rich details\n      * Capture psychological frameworks and strategic evolution\n      * Document territory developments and asset analyses\n      * Include all relevant operational protocols\n      * Use markdown\n      * Do not include new suggestions or additions to the chat - just use only what has already been discussed\n\n      Length should match information density needs - be as detailed as necessary to preserve all valuable intelligence.\n\n      Do not ask any questions. Generate the comprehensive report now!\n      """\n\n      Note: this is an automated request, so do NOT ask any questions.`).trim();s?.setStatus("generating summary outline");const h={};n&&(h.attachment=n),await MineTm.sendMessageAsync(u,h),await MineTm.waitForCompletedMsgCountAsync(l+2,6e4),s?.setStatus("generating summary"),await t(),await e.waitFor(()=>!MineTm.getIsAiResponding()),await MineTm.scrollToLastMsgAsync({useUserMessage:!0});const g=(await MineTm.getCurrentChatIdbMetaAsync()).idbe.messages.slice(-1)[0],p=d+(e=>{const t=e.match(/^```[\w]*\n([\s\S]*?)\n```/m);return t?t[1]:""})(MineTm.getIdbeMessageObjText(g));if(!p.trim())throw e.toastError("Unexpected AI response for phase 1"),"unexpected ai response for phase 1";await t(),(await e.waitFor(()=>e.qsaa('[data-element-id="response-block"]:has([data-element-id="user-message"]) [data-element-id="edit-message-button"]').pop())).click();const y=`If you need more room, end your response with "${m}" (up to 5 times).`;await e.waitFor(()=>i.value,{timeoutMs:3e4}),e.updateReactTypableFormValue(i,p+`\n\n${y}`),(await MineTm.getSendButtonAsync()).click(),await MineTm.waitForCompletedMsgCountAsync(l+2,3e5),await e.waitFor(()=>!MineTm.getIsAiResponding()),await MineTm.scrollToLastMsgAsync(),l+=2,s?.setStatus("");const f=async()=>{const e=(await MineTm.getCurrentChatIdbMetaAsync()).idbe;return MineTm.getIdbeMessageObjText(e.messages.slice(-1)[0]).split("\n").filter(e=>!!e.trim()).slice(-3).join("\n").includes(m)};let w=await f(),b=0;for(;w&&b<5;)s?.setStatus(`generating summary (extension ${b+1})`),await t(),await MineTm.sendMessageAsync(4===b?"continue (last chance to speak)":"continue"+(3===b?" (one more continuation remaining after this)":"")),await MineTm.waitForCompletedMsgCountAsync(l+2,3e5),await e.waitFor(()=>!MineTm.getIsAiResponding()),await MineTm.scrollToLastMsgAsync(),l+=2,w=await f(),b++;s?.setStatus("");const T=(await MineTm.getCurrentChatIdbMetaAsync()).idbe;return T.messages.splice(0,r),T.messages.filter(e=>"user"!==e.role).map(e=>MineTm.getIdbeMessageObjText(e)).join("\n\n")};const d='"""System message\nLet\'s productionize this. I\'m going to guide you through a workflow one step at a time.\n"""',u=e.normalizeSpaceIndents('\n    """⚙️ Let\'s test this\n    We can do some back-and-forths, whereby every time I will run your code in the browser and give you its resulting `console.log`s.\n\n    Now, show one code block containing the code, with clear readable tests.\n\n    Note: Once the execution results I give you prove your code is correct, provide just the final code (without tests), and end your response with "#LGTM" _after_ your code on a new line.\n    """\n  ').trim(),h=e=>{if(!e)return"";const t=MineTm.getIdbeMessageObjText(e).split("\n"),n=t[0].trim();return n.length<10&&t[1]?n+"⏎"+t[1].trim():n},g=async(t,n="")=>{const a=MineTm.getCurrentChatId();let s=e.normalizeSpaceIndents('\n      """System message\n      [Regarding this entire discussion] Return two text blocks in markdown.\n\n      First block: general high-information-density summary of the background, up to a couple pages long depending on the amount of content to summarize.\n\n      Second block: the current/latest situation high-information-density summary.\n      """\n      ').trim();n&&(s=`"""Focus context around\n${n}\n"""\n\n`+s);const i=await MineTm.sendMessageAsync(s,{returnAiResponse:!0}),{idbe:o}=await MineTm.getCurrentChatIdbMetaAsync(),r=o.chatTitle||"";o.messages.splice(-2),await MineTm.setChatIndexedDbValueAsync(o);const l=window.location.href;e.qs('[data-element-id="new-chat-button-in-side-bar"]').click(),await e.waitFor(()=>window.location.href!==l),t?.setStatus("awaiting native app title generation finalization"),await MineTm.sendMessageAsync("[System message] simply respond with 'OK'",{returnAiResponse:!0}),await e.waitFor(async()=>"chatTitle"in(await MineTm.getCurrentChatIdbMetaAsync()).idbe,{recheckIntervalMs:500,timeoutMs:3e4}),t?.setStatus("");const c=(await MineTm.getCurrentChatIdbMetaAsync()).idbe;c.chatTitle=`Offshoot of ${r}`,MineTm.setIdbeMessageObjText(c.messages[0],`"""System message\nThis offshoot chat was forked from another chat \`${a}\`. Simply say "Ready" to acknowledge this system message.\n"""\n\n"""Original chat context\n${i.trim()}\n"""\n`),MineTm.setIdbeMessageObjText(c.messages[1],"Ready"),await MineTm.setChatIndexedDbValueAsync(c),window.location.reload()};MineTm.CommandBar={},MineTm.CommandBar.getCommands=async()=>{const p=e.qs('[data-tooltip-content="Toggle thinking mode"]'),y=p?.innerText.includes("Disable")?"Disable":p?"Enable":"",f=MineTm.getCurrentChatId();let w,b,T,M,v,S,k,x=[],C={};const I=(()=>{const e=window.scrollY+window.innerHeight,t=document.querySelectorAll('[data-element-id="response-block"]');let n=0;for(let a=t.length-1;a>=0&&t[a].getBoundingClientRect().top+window.scrollY>e;a--)n++;return n})();if(f&&(v=await MineTm.getChatIndexedDbValueAsync(f),v)){x=v.messages||[],w=(e=>{if("string"!=typeof e||36!==e.length)return!1;if("-"!==e[8]||"-"!==e[13]||"-"!==e[18]||"-"!==e[23])return!1;for(let t=0;t<36;t++){if(8===t||13===t||18===t||23===t)continue;const n=e.charCodeAt(t);if(!(n>=48&&n<=57||n>=97&&n<=102||n>=65&&n<=70))return!1}return!0})(v.modelInfo.id)&&v.modelInfo.title?`"${v.modelInfo.title}"`:v.modelInfo.id;const t=x.slice(-1)[0]?.createdAt;if(t){const e=Date.now()-new Date(t).getTime();M=MineTm.formatDurationLabel(e)+" ago"}v.tokenUsage?.totalCostUSD&&(b=`$${v.tokenUsage.totalCostUSD.toFixed(4).replace(/(\d\d)$/,e=>{const t={0:"₀",1:"₁",2:"₂",3:"₃",4:"₄",5:"₅",6:"₆",7:"₇",8:"₈",9:"₉"};return e.split("").map(e=>t[e]).join("")})}`);const n=e.qs('button[data-tooltip-content="About this chat"]');if(n){const e=n.querySelector("[style*='conic']")?.style.backgroundImage;if(e){const t=parseFloat(e.split("deg, transparent")[0].trim().split(" ").pop());t&&(T=(t/360*100).toFixed(0))}}C={lastUserCompressIdx:v.messages.findLastIndex(e=>"user"===e.role&&MineTm.getIdbeMessageObjText(e).trim().startsWith(MineTm.sectionRedactionCompletePrefix)),firstUserMsgIdxAfterLastCompressIdx:null},C.lastUserCompressIdx>=0&&(C.firstUserMsgIdxAfterLastCompressIdx=v.messages.findIndex((e,t)=>t>C.lastUserCompressIdx&&"user"===e.role),C.numMsgsToCompress=v.messages.length-C.firstUserMsgIdxAfterLastCompressIdx),S=(()=>{let e=v.chatParams.contextLimit;const t=v.messages.findLastIndex(e=>"clear-context"===e.type),n=v.messages.slice(t>=0?t+1:0).filter(e=>!e.contextClearedAt).length;return 0===e&&(e=1/0),`${n>=e?"🟡 ":""}${n.toLocaleString()}/${e===1/0?"∞":e} mc`})(),k=await MineTm.getCompressOlderMessagesReadonlyPreworkDataAsync(v)}w||(w=e.qs('.pb-1 button[aria-haspopup="menu"] .truncate')?.innerText||"");const A=MineTm.TmCbHelper.getResponseBlockWithSelection();let q;if(A){const e=A.closest('[class*="message-index-"]');e&&(q=Number([...e.classList].find(e=>e.startsWith("message-index-")).split("-")[2]))}let L=0;v&&(L=v.messages.slice(q).reduce((e,t)=>"user"!==t.role?e:t.content&&Array.isArray(t.content)?e+t.content.filter(e=>"text"!==e.type).length:e,0));const E=["first","second","third","fourth","fifth","sixth","seventh","eighth","ninth","tenth","eleventh","twelfth","thirteenth","fourteenth","fifteenth","sixteenth","seventeenth","eighteenth","nineteenth","twentieth"],D=e=>E[e-1];let R=0;const $=x.map((t,n)=>{if("user"===t.role&&Array.isArray(t.content))return t.content.filter(e=>"text"!==e.type).map(t=>{const a=t.metadata?.name||"unknown",s=t.metadata?.estimatedTokens,i=null==s?"unknown":s<1e3?s.toString():s<1e6?`${(s/1e3).toFixed(s%1e3==0?0:1)}k`:`${(s/1e6).toFixed(s%1e6==0?0:1)}M`,o={title:`📎 [Go to attachment] ${R<E.length?D(R+1):R+1}`,subtitle:`${i} tokens  •  > ${a.slice(0,100)}${a.length>100?"...":""}`,hotkeySequence:0===R?"a+f":"",analytics:{manualTimeSavedMs:1e4},run:async()=>e.qs(`.message-index-${n}`).scrollIntoView({behavior:"smooth"})};return R++,o})}).flat().filter(Boolean);$.length&&($[$.length-1].hotkeySequence="a+l");let O=0;const P=x.map((t,n)=>{if(!t.isPinned)return;const a=MineTm.getIdbeMessageObjText(t).split("\n")[0],s={site:i,title:`📌 [Go to pinned] ${O<E.length?D(O+1):O+1}`,subtitle:`> ${a.slice(0,100)}${a.length>100?"...":""}`,hotkeySequence:0===O?"p+f":"",analytics:{manualTimeSavedMs:1e4},run:async()=>e.qs(`.message-index-${n}`).scrollIntoView({behavior:"smooth"})};return O++,s}).filter(Boolean);P.length&&(P[P.length-1].hotkeySequence="p+l");const B=(v?MineTm.getChatEngagedDurationLabel(v):"")+(M?`, ${M}`:""),F=(e=15)=>{const t=v?(t=>{const n=t[t.length-1],a=new Date(n.createdAt),s=60*e*1e3;if(a-new Date(n.createdAt).getTime()>s)return null;for(let e=t.length-1;e>0;e--)if(new Date(t[e].createdAt).getTime()-new Date(t[e-1].createdAt).getTime()>=s)return t[e];return t[0]})(v.messages.filter(e=>"user"===e.role)):null;return{startingMsg:t,startingMsgIdxAgo:v?v.messages.length-v.messages.indexOf(t):null,lookbackDurationMins:e}},j=F(15),U=F(30);let z="";try{z=JSON.parse(localStorage.getItem("TM_useDefaultSystemMessage"))}catch(e){}const V=v&&v.chatParams?.systemMessage===z,N=v&&!V?`🧱 deviated prompt (${((t,n,a={})=>{const{sectionSeparator:s=/\n\s*\n/,sectionTitleRegex:i=/^([A-Z][A-Z\s]*[A-Z])\s*$/m}=a,o=e=>{const t=e.split(s),n=[];return t.forEach(e=>{const t=e.trim().split("\n"),a=t[0]?.trim();i.test(a)?n.push({title:a,content:t.slice(1).join("\n").trim(),fullSection:e.trim()}):a&&n.push({title:null,content:e.trim(),fullSection:e.trim()})}),n},r=o(t),l=o(n),c=new Map(r.filter(e=>e.title).map(e=>[e.title,e])),m=new Map(l.filter(e=>e.title).map(e=>[e.title,e])),d=[],u=[...c.keys()].filter(e=>!m.has(e)),h=[...m.keys()].filter(e=>!c.has(e));u.length&&d.push({level:"section",type:"missing",items:u,description:`↓${e.pluralize(u.length,"sec")}`}),h.length&&d.push({level:"section",type:"extra",items:h,description:`↑${e.pluralize(h.length,"sec")}`});const g=[...c.keys()].filter(e=>m.has(e)),p=[];g.forEach(e=>{c.get(e).content!==m.get(e).content&&p.push(e)}),p.length&&d.push({level:"content",type:"modified",items:p,description:`Δ${e.pluralize(p.length,"sec")}`});const y=e=>e.replace(/\s+/g," ").trim();y(t)===y(n)&&t!==n&&d.push({level:"formatting",type:"whitespace",description:"nits"});const f=t.length,w=n.length,b=Math.abs(f-w),T=Math.round(b/Math.max(f,w)*100);return b&&d.push({level:"quantitative",type:"length",percentage:T,description:`${w>f?"↑":"↓"}${T}%`}),{identical:0===d.length,differences:d,summary:d.map(e=>e.description).join(", ")}})(z,v.chatParams?.systemMessage).summary})`:"",W=t.isThereARecoverableChat(),_=e.qsaa('[data-element="enabled-plugins-indicator"] [data-element-id="enabled-plugin-icon"]').length;let G;if(!v){const t=await e.getIndexedDbCountAsync("keyval-store","keyval");G=e.pluralize(t,"chat")}const H=[{site:s,title:[(new Date).toLocaleString("en-US",{hour:"numeric",minute:"2-digit",hour12:!0}).toLowerCase().replace(" ",""),S,P.length?`${P.length} 📌`:null,B,b,W?"↩️ recoverable chat":""].filter(Boolean).join(" • "),subtitle:[w?`🧠 ${w}`:"",G,T?T+"% full":"","Disable"===y?("💡 Thinks "+(v?.chatParams?.reasoningEffort?"("+v.chatParams.reasoningEffort+" effort)":"")).trim():"",_?`🛠️ ${e.pluralize(_,"Plugin")}`:"",N,R?"🖇️ "+e.pluralize(R,"attachment"):"",v?.Mine?"🗃️ latent data":"",I?`...${I} trailing msg${1===I?"":"s"}`:""].filter(Boolean).join(" • "),isStatusBar:!0},...W?[{site:s,hotkeySequence:"z",title:"↩️ Recover deleted chat",subtitle:`> ${t.getLastDeletedChatTitle()}`,analytics:{manualTimeSavedMs:12e4},run:async()=>await t.recoverDeletedChat()}]:[],{site:i,title:"🌱 Start offshoot chat",hotkeySequence:"o+s",analytics:{manualTimeSavedMs:1e4},run:async e=>{await g(e)}},{site:i,title:"🌱 Start offshoot chat for...",hotkeySequence:"o+s+f",analytics:{manualTimeSavedMs:1e4},run:async e=>{const t=prompt("What's the new offshoot chat topic tldr to optimize the context for?");t?.trim()&&await g(e,t)}},{site:s,title:"New chat",analytics:{manualTimeSavedMs:3e3},run:async()=>{window.location.href=s}},{site:i,title:"Toggle viewing thought dropdown",hotkeySequence:"d+d",analytics:{manualTimeSavedMs:3e3},run:async()=>{e.qsaa('[data-element-id="ai-response"] summary').pop()?.click()}},{site:i,title:"Chat info",hotkeySequence:"i",analytics:{manualTimeSavedMs:3e3},run:async()=>{e.qs('[data-tooltip-content="About this chat"]').click()}},{site:i,title:"🧹 Clear context",run:async()=>{e.qs('[data-element-id="clear-context-button"]').click()}},{site:i,title:"🗜️ Compress chat (& archive original)",showHintNotToInteract:!0,hotkeySequence:"c",analytics:{manualTimeSavedMs:6e5},run:async t=>{t?.setStatus("getting detailed summary");const n=(await MineTm.getCurrentChatIdbMetaAsync()).idbe,a=n.messages.length;await MineTm.getDetailedSummarizationViaPrompt(async()=>{if(await(t?.getShouldInterruptAsync()))throw"User interrupted"}),t?.setStatus("forking");const s=MineTm.getCurrentChatId();await MineTm.scrollToLastMsgAsync();const i=MineTm.getAllResponseBlocks().pop();if(!await MineTm.forkResponseBlockAsync(i))return e.toastError("Error forking it");t?.setStatus("renaming fork");const o=MineTm.getCurrentChatId(),r=`${n.chatTitle} @done(${Date.now()})`;await MineTm.renameChatAsync(o,r),t?.setStatus("getting summary");const l=await MineTm.getChatIndexedDbValueAsync(s);l.messages.splice(0,a);const c=l.messages[0];if("user"!==c.role)return e.toastError("Something was wrong during validation");c.content=`[Redacted — one-off summarization request prompt of archived chat \`${o}\`]`,l.messages=l.messages.filter((e,t)=>0===t||"user"!==e.role),l.tokenUsage?.totalCostUSD&&(l.tokenUsage.totalCostUSD=0),await MineTm.setChatIndexedDbValueAsyncLegacy(s,l),t?.setStatus("navigating"),MineTm.goToChatIdWithHardReload(s)}},...[j,U].map(t=>({site:i,title:"🗜️ Compress session"+(30===t.lookbackDurationMins?" (long)":""),subtitle:`${t.lookbackDurationMins}m chain${t.startingMsg?` • ${t.startingMsgIdxAgo} msg${1===t.startingMsgIdxAgo?"":"s"} since ${MineTm.formatDurationLabel(Date.now()-new Date(t.startingMsg.createdAt).getTime())} ago • "${h(t.startingMsg)}"`:" • (empty)"}`,hotkeySequence:"c+s"+(30===t.lookbackDurationMins?"+l":""),analytics:{manualTimeSavedMs:18e4},run:async n=>{if(!t.startingMsg)return e.toast(`[noop] Session (${t.lookbackDurationMins}m) is empty`);const a=v.messages.indexOf(t.startingMsg);await o(v,a,n)}})),{site:i,title:"🗜️ Compress since last compression",subtitle:C&&v?C.lastUserCompressIdx<0?"Compress entire chat"+(v?` (${v.messages.length} msg${1===v.messages.length?"":"s"})`:""):C.firstUserMsgIdxAfterLastCompressIdx<0?"Nothing new":`Compress ${C.numMsgsToCompress} msgs, starting with "${h(v.messages[C.firstUserMsgIdxAfterLastCompressIdx])}"`:"",hotkeySequence:"c+c",analytics:{manualTimeSavedMs:18e4},run:async t=>{if(C.lastUserCompressIdx<0)return await e.toastInfo("About to compress everything..."),void await o(v,0,t);C.firstUserMsgIdxAfterLastCompressIdx<0?await e.toastWarning("Nothing new to compress"):(await MineTm.scrollToLastMsgAsync(),await o(v,C.firstUserMsgIdxAfterLastCompressIdx,t))}},{site:i,title:"🗜️🤙🏻 Compress since Live mode (Go live)",hotkeySequence:"c+l",analytics:{manualTimeSavedMs:18e4},run:async e=>{const t=v.messages.findLastIndex(e=>MineTm.getIdbeMessageObjText(e)?.trim().startsWith('"""Begin Live mode'));if(t<0)throw"No Live session found";await o(v,t,e)}},{site:i,title:"🗜️ Compress older messages",subtitle:`Compresses ~oldest ~${k?.anticipatedCompressionCount>-1?k?.anticipatedCompressionCount:""}msgs onto ${k?.firstNonCompressionLvl2UserMsgIdx?k?.firstNonCompressionLvl2UserMsgIdx/2:"any"} pre-existing higher density summaries`,hotkeySequence:"c+o",analytics:{manualTimeSavedMs:18e5},run:async e=>{await MineTm.compressOlderMessages(e)}},{site:i,title:"Copy all user messages",analytics:{manualTimeSavedMs:12e4},run:async({})=>{const{idbe:t}=await MineTm.getCurrentChatIdbMetaAsync(),n=JSON.stringify(t.messages.filter(e=>"user"===e.role).map(e=>MineTm.getIdbeMessageObjText(e)),null,2);await e.Extension.copyText(n)}},{site:s,title:"💡 Toggle Think mode",subtitle:y,hotkeySequence:"t+t",analytics:{manualTimeSavedMs:3e3},run:async()=>{await(async()=>{const t=e.qs('[data-tooltip-content="Toggle thinking mode"]');if(!t)return e.toastError("Think mode button not found");const n=()=>t.innerText.includes("Disable"),a=n();t.click(),await e.sleep(10),await e.waitFor(()=>n()===!a)})()}},{site:i,title:"🗜️ Compress rest of chat (from this message)",hotkeySequence:"c+r",subtitle:q&&v?`Compress ${e.pluralize(v.messages.length-q,"msg")} (contains ${e.pluralize(L,"attachment")})`:"No message selected",analytics:{manualTimeSavedMs:18e4},run:async t=>{const n=MineTm.TmCbHelper.getResponseBlockWithSelection();if(!n)return e.toast("[noop] Select some text in a msg first");const a=n.closest('[class*="message-index-"]'),s=Number([...a.classList].find(e=>e.startsWith("message-index-")).split("-")[2]),i=MineTm.getCurrentChatId(),r=await MineTm.getChatIndexedDbValueAsync(i),l=r.messages[s];if("user"!==l.role)return e.toastWarning("Must select user message");const c=n.querySelector('[class*="group/attachment"]')?.innerText;let m=n.innerText;c&&m.startsWith(c)&&(m=m.substring(c.length));const d=((e,t)=>{const n=e=>e.toLowerCase().replace(/\s+/g," ").trim();e=n(e),t=n(t);const a=e.length,s=t.length,i=Array(a+1).fill().map(()=>Array(s+1).fill(0));for(let e=0;e<=a;e++)i[e][0]=e;for(let e=0;e<=s;e++)i[0][e]=e;for(let n=1;n<=a;n++)for(let a=1;a<=s;a++)i[n][a]=Math.min(i[n-1][a]+1,i[n][a-1]+1,i[n-1][a-1]+(e[n-1]===t[a-1]?0:1));const o=Math.max(e.length,t.length);return(o-i[a][s])/o*100})(m,MineTm.getIdbeMessageObjText(l)),u=Array.isArray(l.content)&&l.content.length>1?70:95;if(d<u)return e.toastWarning(`[noop] Unable to get firm match in db (similarity was ${d.toFixed(2)}% of ${u}% needed)`);await MineTm.scrollToLastMsgAsync(),await o(r,s,t)}},{site:i,title:"Diff last code",hotkeySequence:"d+c",analytics:{manualTimeSavedMs:2e4},run:async()=>{const e=["```",'"""'],t=(t,n=e)=>{const a=t.split("\n");let s=!1,i=[],o="";for(const e of a)if(s){if(e===o)return i.join("\n").trim();i.push(e)}else for(const t of n)if(e.startsWith(t)){s=!0,o=t;break}return null},{aiText:n,useTextWithCode:a}=await(async()=>{const{idbe:t}=await MineTm.getCurrentChatIdbMetaAsync();return{aiText:MineTm.getIdbeMessageObjText(t.messages[t.messages.length-1]),useTextWithCode:MineTm.getIdbeMessageObjText(t.messages.reverse().filter(e=>"user"===e.role).find(t=>MineTm.getIdbeMessageObjText(t).split("\n").filter(t=>t.startsWith(e[0])||t.startsWith(e[1])).length>=2))}})(),s=t(n),i=t(a),o=encodeURIComponent(JSON.stringify({a:i,b:s}));window.open(`https://www.textcompare.org/javascript/?mine_config=${o}`)}},{site:i,title:"📝 Update from Taskpaper",subtitle:"Redacts old copies",hotkeySequence:"u+t",unsupportedPlatforms:[MineTm.CommandBarPlatforms.MOBILE],analytics:{manualTimeSavedMs:18e4},run:async()=>{const t=await(async()=>{try{const e=await fetch("http://localhost:3033/api/data/currentTaskpaperContext",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({apiKey:await MineTm.getMinePluginBasedSecretAsync("cbBinProjectDetailsApiKey")})});return(await e.json()).data}catch(e){return"Error: "+e}})();if(!t?.trim())return e.toastError("Unable to fetch data from app");if(["#private","@private","#sensitive","@sensitive"].map(e=>e.toLowerCase()).some(e=>t.toLowerCase().includes(e)))return e.toastWarning("[noop] possibly sensitive content");const n=(await MineTm.getCurrentChatIdbMetaAsync())?.idbe;if(!n)return e.toastWarning("[noop] no active chat found");const a=[],s=n.messages.some(e=>{if("user"===e.role&&"string"==typeof e.content){const{wasRedactionPerformed:n,redactedContent:s}=c(e.content,t.split("\n")[0]);return s&&a.push(s),n}return!1}),i=t.split("\n")[0],o=s||n.messages.some(e=>!("user"!==e.role||!Array.isArray(e.content))&&e.content.filter(e=>"tm_text_file"===e.type&&e.text.includes(i)).length);if(1===a.length&&a[0]===t)return e.toastSuccess("[noop] already up to date");if(!o)return e.toastWarning("[noop][safety] no precedence of project-sharing found in chat");await MineTm.sendMessageAsync("Updated project notes (redacted the previously shared ones)",{append:!0,returnAiResponse:!0,attachment:{text:t}});const r=(await MineTm.getCurrentChatIdbMetaAsync()).idbe;r.messages=r.messages.map((e,t)=>{if("user"===e.role&&"string"==typeof e.content&&t!==r.messages.length-2){const{output:t}=c(e.content,i);e.content=t}return e}),r.messages=r.messages.map((e,t)=>("user"===e.role&&Array.isArray(e.content)&&t!==r.messages.length-2&&(e.content=e.content.filter(e=>!("tm_text_file"===e.type&&e.text.includes(i)))),e)),await MineTm.setChatIndexedDbValueAsyncLegacy(r.id,r),window.location.reload()}},{site:i,title:"⬛️ Sanitize (rm attachments)",analytics:{manualTimeSavedMs:3e5},run:async()=>{const e=(await MineTm.getCurrentChatIdbMetaAsync()).idbe;e.messages=e.messages.map(e=>("user"===e.role&&Array.isArray(e.content)&&(e.content=e.content.filter(e=>"text"===e.type)),e)),await MineTm.setChatIndexedDbValueAsyncLegacy(e.id,e),window.location.reload()}},{site:i,title:"Go to message by timestamp",analytics:{manualTimeSavedMs:1e4},run:async()=>{const t=prompt('Enter timestamp (like "07:35")');if(!t?.trim())return;const n=t.trim().padStart(5,"0");e.qsaa('[id^="message-timestamp"]').find(e=>e.innerText===n)?.closest('[data-element-id="response-block"]').scrollIntoView({behavior:"smooth"})}},{site:i,title:"🧼 Fix draft",hotkeySequence:"f+d",analytics:{manualTimeSavedMs:1e4},run:async()=>{await MineTm.sendMessageAsync('"""Draft optimization\nOptimize this text for maximum concision while preserving:\n* Full effectiveness and meaning\n* Grammatical correctness\n* Minimal obligation/liability exposure\n\nBe polite/warm (even at some cost to concision)! However, do not seem overly eager since we want to maintain appropriate status. In general, assume the sale.\n\nEach unnecessary word increases vulnerability. Stay within the precision of things we discussed.\n\nProduce it in a text block.\n"""')}},{site:i,title:"⚙️ System prompt | 🔃 update to latest",subtitle:V?"Already up to date.":N,analytics:{manualTimeSavedMs:2e4},hotkeySequence:"s+p+u",run:async()=>{await MineTm.mutateCurrentIdbe(async t=>{let n;try{n=JSON.parse(localStorage.getItem("TM_useDefaultSystemMessage"))}catch(t){throw e.toastError("[noop] unable to get latest prompt"),t}t.chatParams&&(t.chatParams.systemMessage=n)})}},{site:i,title:"🗣️ Speak out loud",subtitle:A?`> ${A.innerText.trim()}`:"Last AI response",analytics:{manualTimeSavedMs:3e4},hotkeySequence:"s+o",run:async t=>{const n=!0===t?.triggerEvent?.shiftKey;let a;const s=async()=>{const{idbe:e}=await MineTm.getCurrentChatIdbMetaAsync();return e},i=await s();"user"!==i.messages[i.messages.length-1].role&&q?a=i.messages[q]:(t?.setStatus("awaiting ai response"),a=await e.waitFor(async()=>{if(t&&await t.getShouldInterruptAsync())throw"cancelled";const e=await s(),n=e.messages[e.messages.length-1];if("user"!==n.role)return n},{recheckIntervalMs:1e3,timeoutMs:3e5}));let o=Array.isArray(a.content)?a.content.find(e=>"thinking"===e.type)?.thinking:null;o||"string"==typeof a.reasoning_content&&a.reasoning_content&&(o=a.reasoning_content);const r=MineTm.getIdbeMessageObjText(a),l=async(e,{openaiVoiceModel:n="nova",speakingRate:a=1}={})=>{const s=[];for(let t=0;t<e.length;t+=3900)s.push(e.substring(t,t+3900));for(let e=0;e<s.length;e++){let i=!1;const o=MineTmAudio.speakTextAsync(s[e],{openaiVoiceModel:n,speakingRate:a}),r=setInterval(async()=>{t&&await t.getShouldInterruptAsync()&&(MineTmAudio.speechAudio?.pause(),MineTmAudio.stopLocalSpeaking(),i=!0)},1e3);if(await o.finally(()=>clearInterval(r)),i||t&&await t.getShouldInterruptAsync())throw"user interrupted"}};n&&o&&(t?.setStatus("speaking thoughts"),await l(o,{openaiVoiceModel:"nova",speakingRate:1.3})),t?.setStatus("speaking response"),await l(r)}},{site:i,title:"⚙️ System prompt | ⬛ redact personal info",subtitle:"Removes personal sections from this chat",hotkeySequence:"s+p+r",analytics:{manualTimeSavedMs:15e3},run:async()=>{await MineTm.mutateCurrentIdbe(async t=>{if(!t.chatParams?.systemMessage)return void e.toastError("[noop] No system message found to cure");const n=((e,t=[])=>e.split(/\n\s*\n/).filter(e=>{const n=e.trim().split("\n")[0];return!t.some(e=>n.toUpperCase().includes(e.toUpperCase()))}).join("\n\n"))(t.chatParams.systemMessage,["USER PROFILE"]);t.chatParams.systemMessage=n})}},{site:s,title:"🔠 Text conversion",hotkeySequence:"o+c+r",analytics:{manualTimeSavedMs:2e4},run:async()=>{await MineTm.sendMessageAsync('"""Text conversion\nPlease convert to text in an easy to consume manner. Output all transcripts in text blocks. Taskpaper format with tabs (and no trailing \':\'s) is excellent, if that makes sense depending on the context.\n"""',{append:!0})}},{site:s,title:"🌐 Send with context",hotkeySequence:"w+c",analytics:{manualTimeSavedMs:15e3},subtitle:"Sends with ambient context",run:async e=>{e?.setStatus("getting key...");const t=await MineTm.getMinePluginBasedSecretAsync("activityDataApiKey");e?.setStatus("fetching activity data...");const n=await(async()=>{if(!t)return null;if(!MineTm.getIsInPersonalEnvironment())return null;const e="https://garden1.vercel.app/api/queryActiveHours",n=[fetch(`${e}?type=summary&profile=work&key=${t}`)];n.push(fetch(`${e}?type=summary&profile=personal&key=${t}`));const a=await Promise.allSettled(n);if(a.some(e=>"rejected"===e.status))return null;const s=a.map(e=>e.value);if(!s.every(e=>e.ok))return null;const i=await Promise.all(s.map(e=>e.json()));return{work:i[0],personal:i[1]}})(),a=n?`Activity Data:\n${JSON.stringify(n,null,2)}`:"Recent activity: not available";e?.setStatus("");const s=MineTm.isMobile?" on 📱":" on 💻",i=MineTm.generateBlock("User context",`${MineTm.getHumanizedTimeLabel()}${s}${a?`\n\n${a}`:""}`);await MineTm.sendMessageAsync(i,{append:!0})}},{site:i,title:"Generate impact probability density matrix",analytics:{manualTimeSavedMs:18e4},subtitle:"Generates a graph",run:async()=>{const t=e.normalizeSpaceIndents('\n            Generate a probability distribution visualization for the current situation we\'re discussing.\n\n            PART 1: First, provide a brief outline of the probability density matrix by listing:\n            - Each possible outcome\n            - Its probability (%)\n            - Its impact/severity (-10 worst to +10 best)\n            - Brief description of what happens\n\n            PART 2: Create the visualization using this exact format:\n\n            HTML code block with div with inline SVG (no external dependencies), 800x500 viewbox with:\n\n            VISUAL ELEMENTS:\n            - Background: #0a0a0a\n            - Smooth bell-curve mountains for each outcome\n            - Mountain height = probability percentage\n            - Mountain x-position = impact score on scale\n            - Color scheme: #991b1b (catastrophic), #ef4444 (very bad), #fbbf24 (bad), #10b981 (good)\n            - Radial gradient overlays: red emanating from top-left corner of the graph, green from top-right. Together, they should cover most of the graph area.\n            - Glowing circles at peaks with probability labels\n            - Descriptive boxes with arrows for major outcomes\n            - Expected value dashed vertical line\n            - Center line at x=0 if scale includes negatives\n\n            AXES:\n            - Y-axis: "PROBABILITY" (0% to 100%)\n            - X-axis: "OUTCOME SEVERITY" or contextually appropriate label\n            - Title: "[Situation] OUTCOME DISTRIBUTION"\n\n            CRITICAL: Position mountains accurately on the impact scale (not evenly distributed). Show empty space where no probability exists. All mountains should be within the grid area. Use cubic bezier curves for smooth bell shapes.\n\n            The visualization should immediately convey where the probability mass sits and whether outcomes lean positive or negative.\n          ');await MineTm.sendMessageAsync(t,{append:!0})}},{site:i,title:"Enable javascript plugin",analytics:{manualTimeSavedMs:1e4},run:async()=>{await MineTm.setPluginsStateAsync(!0,{desiredMaybePluginNames:["Javascript Runner"]})}},{site:s,title:"👂🏻 Toggle wake-word listening",subtitle:(MineTm.barListenerRequestedOnIdle?"Disable":"Enable")+' listening for "Bar"',hotkeySequence:"w+w",analytics:{manualTimeSavedMs:1e4},run:async()=>{MineTm.barListenerRequestedOnIdle?(MineTm.barListener.stop(),MineTm.barListenerRequestedOnIdle=!1):(MineTm.barListener.listenForBarAsync(),MineTm.barListenerRequestedOnIdle=!0)}},{site:i,title:"Go to homepage",hotkeySequence:"h",analytics:{manualTimeSavedMs:5e3},run:async()=>window.location.href="/"},{site:i,title:"Wipe plugin contexts",analytics:{manualTimeSavedMs:3e4},run:async()=>{const t=e.qsaa('[data-element-id="response-block"]').filter(e=>e.querySelector("details")||e.querySelector('[data-element-id="additional-actions-of-response-container"]')?.innerText.length).reverse();for(let e=0;e<t.length;e++){const n=t[e];await MineTm.deleteRespBlockAsync(n)}}},{site:i,title:"➖ Delete last exchange",hotkeySequence:"d",analytics:{manualTimeSavedMs:15e3},run:async e=>await MineTm.deleteLastExchangeAsync({maybeCbConfig:e,enableScrolling:!0})},{site:i,title:"➖ Delete last exchange",hotkeySequence:"d+l",analytics:{manualTimeSavedMs:15e3},run:async e=>await MineTm.deleteLastExchangeAsync({maybeCbConfig:e,enableScrolling:!0})},{site:i,title:"➖ Delete selected messages",hotkeySequence:"d+m",showHintNotToInteract:!0,analytics:{manualTimeSavedMs:1e4},run:async(n={})=>{let a=!0;!0===n.triggerEvent?.shiftKey&&(a=!1);const s=(t.getResponseBlocksWithSelection()||[]).reverse();if(!s.length)return e.toastWarning("[noop] no selected messages found");window.getSelection().removeAllRanges();const i=s.map(e=>"* "+((e=>e.querySelector('[data-element-id="user-message"]'))(e)?"🧑🏻":"🤖")+": "+e.innerText.split("\n")[0].slice(0,50)+"...").join("\n");if(!(a&&s.length>10)||confirm(`Proceed with deletion of ${s.length} message${1===s.length?"":"s"}?\n${i}`))for(let e=0;e<s.length;e++){const t=s[e];t.scrollIntoView(),await MineTm.deleteRespBlockAsync(t)}}},{site:i,title:"📌 Toggle Pin this message",subtitle:A?`> ${A.innerText.trim()}`:"No message selected",hotkeySequence:"p",analytics:{manualTimeSavedMs:7e3},run:async()=>{const n=t.getResponseBlockWithSelection();if(!n)return e.toast("[noop] Select some text in a msg first");await MineTm.togglePinResponseBlockAsync(n)?await MineTm.favoriteCurrentChatAsync():await MineTm.getNumPinnedMsgs()||await MineTm.favoriteCurrentChatAsync(!1)}},{site:i,title:"🧼 Fix/polish code",subtitle:"Additive to draft message",hotkeySequence:"f+c",analytics:{manualTimeSavedMs:7e3},run:async()=>{MineTm.sendMessageAsync(n,{append:!0})}},{site:i,title:"🧼 Fix/polish language",hotkeySequence:"f+l",analytics:{manualTimeSavedMs:7e3},run:async()=>{MineTm.sendMessageAsync(a,{append:!0})}},{site:s,title:"🖼️ Storybook image plugins",hotkeySequence:"p+i",analytics:{manualTimeSavedMs:1e4},run:async()=>{MineTm.sendMessageAsync('\n"""System plugin\nYou can render images from Google Image Search within your response by creating a code block with language identifier "luckygoogleimage" and set the contents to a JSON object with "query" and optional "imgType" fields.\n"imgType" supports: clipart, face, lineart, stock, photo (default), animated\nThe rendering layer will then replace your code block with the actual first image.\n"""\n\n"""System plugin\nYou can render images using an advanced AI art generator within your response by creating a code block with language identifier "aiart" and set the contents to a JSON object with "query". It can be pretty detailed, including constraints like photo-realism.\nThe rendering layer will then replace your code block with the actual first image.\n"""\n',{append:!0})}},{site:s,title:"👾 Play Impossible Task Game",hotkeySequence:"p+i+g",analytics:{manualTimeSavedMs:6e4},run:async()=>{const t=e.normalizeSpaceIndents('\n            """👾 Impossible Task Game Instructions\n            1. Host sets an achievable goal with clear success criteria and deadline (like "Get icecream by midnight"). It should be simple, but can be challenging\n            2. Player proposes a solution (like "walk to the ice cream store next door and get some")\n            3. Host introduces new obstacles that nullify the previous solution, providing logical reasoning that\'s entertaining, engaging, and potentially pragmatically educational (like the store being closed because the FDA discovered that their ice cream\'s unique blue color comes from copper sulfate contamination - a common issue in older dairy facilities where copper pipes, originally chosen for their superior heat conductivity in pasteurization, get corroded by milk\'s natural acidity). Each obstacle should:\n              - Be engaging and plausible\n              - Be creative and novel (avoid reusing or extending previous obstacles)\n              - Teach something interesting with practical value when possible (industry facts, scientific principles, historical events)\n            4. Player adapts with new solution\n            5. Repeat steps 3-4 until either:\n              - Player succeeds through clever thinking\n              - Player or host relents\n\n            Keep in mind\n            - Original task/goal never changes. Do not pick the example scenario. Topics should not be nerdy or very technical.\n            - Each obstacle must be logically connected and somewhat plausible\n            - No recycling previous obstacle types\n            - Host must maintain plausible path to success\n\n            Other notes\n            - Use markdown, emojis, or formatting to keep responses visually engaging\n            - Add `---` separators between major scene changes or sections\n            - Bold key developments as they occur\n\n            Best played with time pressure and escalating complexity.\n            """\n\n            Let\'s play! You can be the host\n            ').trim();await MineTm.sendMessageAsync(t)}},{site:i,title:"🏁 Productionize code",subtitle:"Simplify to my tastes and test",hotkeySequence:"p+c",analytics:{manualTimeSavedMs:48e4},run:async t=>{const a=async()=>{if(await(t?.getShouldInterruptAsync()))throw"User interrupted"},s=async e=>{const t=(await MineTm.getCurrentChatIdbMetaAsync()).idbe.messages.length;await e(),await MineTm.waitForCompletedMsgCountAsync(t+2,3e5)};let i=0;t?.setStatus("testing");const o=async(n="")=>{await s(async()=>await MineTm.sendMessageAsync((n?`${n}\n\n`:"")+u,{append:!0,returnAiResponse:!0}));let o=0;for(;;){if(t?.setStatus(`testing (iter #${o})`),await a(),30===o)throw"taking too many iterations";const n=MineTm.getAllResponseBlocks().pop();if(o>0&&n.innerText.trim().endsWith("#LGTM"))break;await s(async()=>{(await e.waitFor(()=>n.querySelector(".exec-and-reply-btn"))).click()}),o++}i+=o};await o(d),t?.setStatus("polishing"),await a(),await s(async()=>await MineTm.sendMessageAsync(n,{returnAiResponse:!0})),i++,t?.setStatus("testing polished code"),await a(),await o(),i++,t?.setStatus("verifying");const r=MineTm.getAllResponseBlocks(),l=r[r.length-3].querySelector("code").innerText,c=r[r.length-1].querySelector("code").innerText,m=l.includes(c);t?.setStatus(""),m?e.toastSuccess(`🏁 Productionized with ${i} iteration${1===i?"":"s"}`):e.toastWarning("🏁 Productionized. Ensure final code is same that was tested.")}},{site:i,title:"🏁🧼 Productionize code cleanup",hotkeySequence:"p+c+c",analytics:{manualTimeSavedMs:1e4},run:async()=>{const{idbe:e}=await MineTm.getCurrentChatIdbMetaAsync(),t=e.messages.findLastIndex(e=>MineTm.getIdbeMessageObjText(e).startsWith(d));if(t<0)throw"Starting point not found";MineTm.setIdbeMessageObjText(e.messages[t],'"""System message\nRedacted thread where we productionized the code.\n"""'),t<e.messages.length-2&&e.messages.splice(t+1,e.messages.length-t-2),await MineTm.setChatIndexedDbValueAsync(e),window.location.reload()}},{site:i,title:"Clear context before this message",subtitle:A?`> ${A.innerText.trim()}`:"No message selected",analytics:{manualTimeSavedMs:1e4},run:async()=>{const n=t.getResponseBlockWithSelection();if(!n)return e.toast("[noop] Select some text in a msg first");const a=n.closest('[class*="message-index-"]'),s=Number([...a.classList].find(e=>e.startsWith("message-index-")).split("-")[2]),i=await MineTm.getChatIndexedDbValueAsync(f);i.messages.splice(s,0,{type:"clear-context"}),await MineTm.setChatIndexedDbValueAsyncLegacy(f,i),window.location.reload()}},{site:i,title:"☁️ Upload current chat",subtitle:"uploads to my server",hotkeySequence:"u",analytics:{manualTimeSavedMs:6e4},run:async()=>{(MineTm.isMobile||"personal"===e.Environment?.Profile?.name?.toLowerCase()||confirm("Are you sure you want to upload this chat to server buffer?"))&&await MineTm.copyCurrentChatToServerAsync()}},{site:i,title:"Produce cured Speech To Text (STT) compilation",subtitle:"with obviously correct tweaks",analytics:{manualTimeSavedMs:6e4},run:async()=>{await MineTm.sendMessageAsync(e.normalizeSpaceIndents('\n            """Speech to text compilation instructions\n            Please reproduce all this content verbatim now in a text block. Anything that is an obvious speech-to-text correction or any obvious corrections, feel free to do that. Like grammar and punctuation too if you are basically certain. Else verbatim please. Thanks!\n            """\n            '),{append:!0})}},{site:i,title:"📝 Rename chat manually",subtitle:["Reloads page",v?`> ${v.chatTitle}`:""].filter(Boolean).join(" • "),hotkeySequence:"r+m",analytics:{manualTimeSavedMs:1e4},run:async()=>{const e=MineTm.getCurrentChatId();if(!e)return;const t=await MineTm.getChatIndexedDbValueAsync(e),n=prompt("Rename chat to:",t.chatTitle);n?.trim()&&(await MineTm.renameChatAsync(e,n),window.location.reload())}},{site:i,title:"📃 Write Google Docs markdown",hotkeySequence:"g+d",analytics:{manualTimeSavedMs:1e4},run:async()=>{MineTm.getCurrentChatId()&&await MineTm.sendMessageAsync(e.normalizeSpaceIndents('\n            """Google Document\n            Write a markdown document in a text block that I will convert into Google Document.\n\n            No need for title. Include "# Objective" (heading 1) and "# Design" (heading 2) sections and keep most of the contents within the design using higher order headings.\n\n            The content should be concise. Be careful and minimize saying things that could expose vulnerability or liability for you and I.\n            """'),{append:!0})}},{site:s,title:"Go to archived chats",hotkeySequence:"g+a",analytics:{manualTimeSavedMs:1e4},run:async()=>{e.qs('[data-element-id="workspace-tab-settings"]').click(),await e.waitFor(()=>e.qsaa("button").find(e=>e.innerText.trim().toLowerCase()==="View Archived Chats".trim().toLowerCase())).then(e=>e.click())}},{site:i,title:"Plugins | enable",hotkeySequence:"p+e",analytics:{manualTimeSavedMs:1e4},run:async()=>{await MineTm.setPluginsStateAsync(!0)}},{site:i,title:"Copy last AI response as markdown",hotkeySequence:"c+a+m",analytics:{manualTimeSavedMs:3e4},run:async()=>{const{idbe:t}=await MineTm.getCurrentChatIdbMetaAsync(),n=t.messages.pop(),a=MineTm.getIdbeMessageObjText(n);await e.Extension.copyText(a)}},{site:i,title:"📝 Rename chat automatically",subtitle:["Reloads page",v?`> ${v.chatTitle}`:""].filter(Boolean).join(" • "),hotkeySequence:"r",analytics:{manualTimeSavedMs:2e4},run:async()=>{const t=MineTm.getCurrentChatId();if(!t)return;const n=(await MineTm.sendMessageAsync(e.normalizeSpaceIndents("\n            \"\"\"System message\n            What is a good title for this chat?\n\n            Must be like a phrase long and include key proper nouns including key peoples' names (makes it easily searchable).\n\n            Keep it super high information density (remove conjunctions like 'the', 'and') and such where applicable, even if it doesn't flow well\n\n            Return JUST the answer and NOTHING else.\n            \"\"\"\n            ").trim(),{returnAiResponse:!0})).split("\n")[0].trim();if(!n)throw"No title gotten";await MineTm.renameChatAsync(t,n,{deleteLastTwoMessages:!0}),window.location.reload()}},...[{levelEnum:"title",levelLabel:"titles"},{levelEnum:"message",levelLabel:"individual chat messages"},{levelEnum:"chat",levelLabel:"chats"}].map(({levelEnum:e,levelLabel:t})=>({site:s,title:`🔍 Search ${t}`,hotkeySequence:"title"===e?"s":"message"===e?"s+m":"",analytics:{manualTimeSavedMs:6e4},run:async(n={})=>{const a=!0===n.triggerEvent?.shiftKey,s={levelEnum:e,levelLabel:t};MineTm.isMobile&&(s.preferRedirect=!0),await MineTm.searchChatsAsync(a,s)}})),...[{name:"Gemini 2.5 Flash Image",hotkeySequence:"m+g+i"},{name:"Gemini 2.5 Pro",hotkeySequence:"m+g+p"},{name:"Gemini 2.5 Flash",hotkeySequence:"m+g+f"},{name:"Claude Sonnet 4.5",hotkeySequence:"m+c+s"},{name:"Claude Opus 4.1",hotkeySequence:"m+c+o"},{name:"Claude 3.5 Haiku",hotkeySequence:"m+c+h"},{name:"GPT-4o Mini",hotkeySequence:"m+m"},{name:"Ollama: nous-hermes:13b",hotkeySequence:"m+o+n"},{name:"Ollama: phi4:latest",hotkeySequence:"m+o+p"}].map(({name:t,hotkeySequence:n})=>({site:s,title:`🧠 Switch to model: ${t}`,analytics:{manualTimeSavedMs:1e4},hotkeySequence:n,run:async()=>{const n=()=>e.qs('.pb-1 button[aria-haspopup="menu"]');n().click(),(await e.waitFor(()=>e.qsaa('[id="headlessui-portal-root"] [role="menuitem"]').find(e=>e.innerText.split("\n")[0].toLowerCase()===t.toLowerCase()))).click(),await e.waitFor(()=>n()?.querySelector(".truncate")?.innerText===t)}})),{site:i,title:"Retry last message",analytics:{manualTimeSavedMs:3e3},run:async()=>{const t=e.qsaa('[data-element-id="user-message"]').pop();t.scrollIntoView({behavior:"smooth"}),t.closest('[data-element-id="response-block"]').querySelector('button[data-element-id="edit-message-button"]').click()}},{site:s,title:"Toggle fullscreen",hotkeySequence:"f",analytics:{manualTimeSavedMs:5e3},run:async()=>{document.dispatchEvent(new Event("mineToggleFullscreen"))}},{site:s,title:"Toggle fullscreen | models menu",hotkeySequence:"f+m",analytics:{manualTimeSavedMs:5e3},run:async()=>{document.dispatchEvent(new Event("mineToggleFullscreen")),await e.sleep(300),e.qs('.pb-1 button[aria-haspopup="menu"]').click()}},{site:i,title:"⬇️ Scroll to last message exchange",hotkeySequence:"l",analytics:{manualTimeSavedMs:5e3},run:async()=>await MineTm.scrollToLastMsgAsync()},{site:i,title:"⬆️ Scroll to top",subtitle:"Go to top of the chat view",hotkeySequence:"t",analytics:{manualTimeSavedMs:5e3},run:async()=>{await e.sleep(50);const t=()=>e.qs('[data-element-id="chat-space-middle-part"]').scrollTo({top:0,left:0,behavior:"smooth"});for(;!e.qs(".message-index-0");){t();const n=e.qs('button:has([d="M4.293 15.707a1 1 0 010-1.414l5-5a1 1 0 011.414 0l5 5a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414 0zm0-6a1 1 0 010-1.414l5-5a1 1 0 011.414 0l5 5a1 1 0 01-1.414 1.414L10 5.414 5.707 9.707a1 1 0 01-1.414 0z"])');n?.click(),await e.sleep(1e3)}t(),await e.sleep(100),await e.waitFor(()=>!MineTm.isBeingScrolled)}},{site:i,title:"Generate full report",hotkeySequence:"g+r",analytics:{manualTimeSavedMs:3e4},run:async()=>{const t=e.normalizeSpaceIndents('\n            """Report\n            Generate a comprehensive report of everything we discussed so far. Optimize for maximum information density (does not have to be human readable). Definitely include key facts, stats, and anything that matters.\n\n            Put it in markdown block. It can be as looooooooooooong as necessary; prioritize capturing the depth of info.\n            """\n          ');MineTm.sendMessageAsync(t,{append:!0})}},{site:"/$",title:"Go to Last chat",hotkeySequence:"l",analytics:{manualTimeSavedMs:5e3},run:async()=>await MineTm.goToLastRecentChatAsync()},{site:i,title:"Scroll to last/bottom context limit message",hotkeySequence:"l+c",analytics:{manualTimeSavedMs:5e3},run:async()=>{const t=e.qs(".firstLookbackMessage");if(!t)return e.toast("No context limited message");t?.scrollIntoView({behavior:"smooth"})}},{site:i,title:"Copy hyperlink to selected message",hotkeySequence:"h+l",analytics:{manualTimeSavedMs:5e3},run:async()=>{const n=t.getResponseBlockWithSelection();if(!n)return e.toast("[noop] Select some text in a msg first");const a="message-timestamp-",s=e.qs(`[id^="${a}"]`,n).id?.replace(a,"");if(!s)return e.toastWarning("Coudnt get message id");const i=`${window.location.origin}/#chat=${MineTm.getCurrentChatId()}&messageId=${s}`;e.Extension.copyText(i)}},{site:i,title:"Copy compiled Live mode entries as diary",analytics:{manualTimeSavedMs:6e4},run:async()=>{const t=(await MineTm.getCurrentChatIdbMetaAsync())?.idbe,n=MineTm.liveMode?.initPrompt?.trim().split("\n")[0];if(!n)throw"Live mode module likely not loaded";const a=t.messages.findLastIndex(e=>"user"===e.role&&e.content.startsWith(n));if(a<0)throw"Live mode portion not found";const s=t.messages.slice(a+1).filter(e=>"user"===e.role).map(e=>e.content.split("\n---\n")[0].trim()).join("\n\n");e.Extension.copyText(s)}},{site:s,title:"Replace lines",hotkeySequence:"r+l",analytics:{manualTimeSavedMs:15e3},run:async()=>{const t=await MineTm.getTaAsync(),n=(t.value.substring(t.selectionStart,t.selectionEnd)||"").split("\n")[0]||prompt("Enter the exact line contents you'd like to replace","Me");if(!n?.trim())return;const a=prompt(`What would you like to replace instances of that line ("${n}") with?`,"Myself");if(!a?.trim())return;const s=t.value.split("\n").map(e=>e===n?a:e).join("\n");e.updateReactTypableFormValue(t,s),t.focus()}},{site:i,title:"Prune everything before latest context clear",analytics:{manualTimeSavedMs:3e4},run:async()=>{const e=MineTm.getCurrentChatId(),n=await t.getChatData(e),a=((e,t)=>{for(let n=e.length-1;n>=0;n--)if(t(e[n]))return n;return-1})(n.messages,e=>"clear-context"===e.type);a<0||(n.messages.splice(0,a+1),await t.updateChatData(e,n),window.location.reload())}},...[0,3,5,10,20,25,50,75,100].map(n=>({site:i,title:`👀 Set lookback history to: ${n||"All"} msg${1===n?"":"s"}`,hotkeySequence:n?"":"l+a",analytics:{manualTimeSavedMs:17e3},run:async()=>{await t.openModelMenuItemAsync("Change Chat Parameters");const a=await e.waitForQs('[data-element-id="pop-up-modal"] select');e.updateReactTypableFormValue(a,n),e.qs('[data-element-id="save-model-settings-button"]').click(),await e.waitFor(async()=>(await MineTm.getCurrentChatIdbMetaAsync()).contextSize===n,{recheckIntervalMs:100}),document.dispatchEvent(new CustomEvent("numMsgsInChatChanged"))}})),{site:s,title:"⚙️ System prompt | edit",hotkeySequence:"s+p",analytics:{manualTimeSavedMs:15e3},run:async()=>{const n=e.CommandBar.isCurrentUrlMatchedByPattern(i);await t.openModelMenuItemAsync(n?"Change Chat Parameters":"Manage Models"),!n&&(await e.waitFor(()=>e.qsaa("button").find(e=>"Global settings"===e.innerText))).click();const a=await e.waitForQs('[data-element-id="new-system-instruction"]');n&&await e.sleep(100),a.scrollIntoView({behavior:"smooth"}),n&&await e.sleep(500),a.focus()}},{site:i,title:"Edit AI response",subtitle:"WIP - AI command to edit the AI response's text block content",hotkeySequence:"e+r",analytics:{manualTimeSavedMs:6e4},run:async()=>{}},{site:i,title:"Prune since last call",analytics:{manualTimeSavedMs:3e4},run:async()=>{const e=MineTm.getCurrentChatId(),n=await t.getChatData(e),a=((e,t)=>{for(let n=e.length-1;n>=0;n--)if(t(e[n]))return n;return-1})(n.messages,e=>"user"===e.role&&e.content.toLowerCase().startsWith("[operational message]")&&e.content.toLowerCase().includes("ready"));a<0||(n.messages.splice(a),await t.updateChatData(e,n),window.location.reload())}},{site:i,title:"➖ Wipe chat clean",analytics:{manualTimeSavedMs:2e4},run:async()=>{await(async()=>{const t=e.qs("#chat-input-textbox"),n=t.value;e.updateReactTypableFormValue(t,""),e.qsaa('[data-element-id="user-message"]')[0].closest('[data-element-id="response-block"]').querySelector('[data-element-id="edit-message-button"]').click(),await e.waitFor(()=>!!t.value),e.updateReactTypableFormValue(t,"."),e.qsaa('[data-element-id="message-input"] [d="M242.72 256l100.07-100.07c12.28-12.28 12.28-32.19 0-44.48l-22.24-22.24c-12.28-12.28-32.19-12.28-44.48 0L176 189.28 75.93 89.21c-12.28-12.28-32.19-12.28-44.48 0L9.21 111.45c-12.28 12.28-12.28 32.19 0 44.48L109.28 256 9.21 356.07c-12.28 12.28-12.28 32.19 0 44.48l22.24 22.24c12.28 12.28 32.2 12.28 44.48 0L176 322.72l100.07 100.07c12.28 12.28 32.2 12.28 44.48 0l22.24-22.24c12.28-12.28 12.28-32.19 0-44.48L242.72 256z"]').forEach(t=>e.simulateClick(t.closest("svg"))),(await e.waitForQs('[data-element-id="send-button"]')).click(),e.updateReactTypableFormValue(t,n)})()}},{site:s,title:"🤙🏻 Go live",subtitle:"Use with headphones",hotkeySequence:"g+l",analytics:{manualTimeSavedMs:5e3},run:async(t={})=>{await e.waitFor(()=>!!MineTm.initGoLiveAsync),await MineTm.initGoLiveAsync({triggeredViaDirectUserInteraction:!0})}},{site:s,title:"🤙🏻📲 Go live (Push to talk)",hotkeySequence:"g+l+p",analytics:{manualTimeSavedMs:5e3},run:async(t={})=>{await e.waitFor(()=>!!MineTm.initGoLiveAsync),await MineTm.initGoLiveAsync({mode:MineTm.liveMode.SttModes.PUSH_TO_TALK,triggeredViaDirectUserInteraction:!0})}},{site:s,title:"🤙🏻🔊 Go live (Speaker mode)",subtitle:"Automatically mutes you iff it's speaking",hotkeySequence:"g+l+s",analytics:{manualTimeSavedMs:5e3},run:async(t={})=>{await e.waitFor(()=>!!MineTm.initGoLiveAsync),await MineTm.initGoLiveAsync({mode:MineTm.liveMode.SttModes.SPEAKER,triggeredViaDirectUserInteraction:!0})}},{site:s,title:"🤙🏻🔇 Go live (muted)",subtitle:"Only you speak",hotkeySequence:"g+l+m",analytics:{manualTimeSavedMs:1e4},run:async(t={})=>{await e.waitFor(()=>!!MineTm.initGoLiveAsync),await MineTm.initGoLiveAsync({speakOutput:!1,triggeredViaDirectUserInteraction:!0})}},{site:s,title:"📝 Notes",hotkeySequence:"n",unsupportedPlatforms:[MineTm.CommandBarPlatforms.MOBILE],analytics:{manualTimeSavedMs:3e3},run:async(t={})=>{(()=>{const t=e.qs(".mine_notes");t.focus(),t.value.trim()||(e.updateReactTypableFormValue(t," "),t.select())})()}},{site:s,title:"📝 Notes | next",hotkeySequence:"n+n",unsupportedPlatforms:[MineTm.CommandBarPlatforms.MOBILE],analytics:{manualTimeSavedMs:7e3},run:async(t={})=>{const n=r();if(!n)return e.toastWarning("Notes is empty");await l(n)}},{site:s,title:"📝 Notes | all",hotkeySequence:"n+a",unsupportedPlatforms:[MineTm.CommandBarPlatforms.MOBILE],analytics:{manualTimeSavedMs:7e3},run:async(t={})=>{const n=[];let a;for(;a=r();)n.push(a);if(!n.length)return e.toastWarning("Notes is empty");await l(n.join("\n\n"))}},{site:s,title:"📝 Notes | all | absorb",hotkeySequence:"n+a+a",unsupportedPlatforms:[MineTm.CommandBarPlatforms.MOBILE],analytics:{manualTimeSavedMs:1e4},run:async(t={})=>{const n=await MineTm.getTaAsync(),a=n.value.trim();if(!a)return void e.updateReactTypableFormValue(n,"");const s=e.qs(".mine_notes");e.updateReactTypableFormValue(s,a+"\n\n"+s.value.trim()),e.updateReactTypableFormValue(n,""),n.focus()}},{site:s,title:"📝 Notes | next | delete",hotkeySequence:"n+n+x",unsupportedPlatforms:[MineTm.CommandBarPlatforms.MOBILE],analytics:{manualTimeSavedMs:5e3},run:async(t={})=>{if(!r())return e.toastWarning("Notes are empty")}},{site:i,title:"▶️ Execute and reply last",hotkeySequence:"e",analytics:{manualTimeSavedMs:7e3},run:async(t={})=>e.qsaa(".exec-and-reply-btn").pop().click()},{site:i,title:"🗑️ Destructive exit",hotkeySequence:"x",showHintNotToInteract:!0,analytics:{manualTimeSavedMs:2e4},subtitle:v?`${v.messages.length} msg${1===v.messages.length?"":"s"}`:"",run:async(e={})=>{await m(e)}},{site:i,title:"Get current chat ID",analytics:{manualTimeSavedMs:1e4},subtitle:"For copying",run:async(e={})=>{alert(MineTm.getCurrentChatId())}},{site:i,title:"[Admin] Fix archived state",analytics:{manualTimeSavedMs:1e4},subtitle:"Deletes '.archivedAt' on current chat IndexedDB (may fix loading issues). Reloads the page",run:async(t={})=>{const{idbe:n}=await MineTm.getCurrentChatIdbMetaAsync();return n?"archivedAt"in n?(delete n.archivedAt,await MineTm.setChatIndexedDbValueAsync(n),void window.location.reload()):e.toastInfo("[noop] '.archivedAt' not currently present"):e.toastWarning("chat 'idbe' data not found")}},{site:i,title:"🧭 Summarize positioning",analytics:{manualTimeSavedMs:3e4},hotkeySequence:"p+o",subtitle:"Request current orientation and positioning",run:async(e={})=>{await MineTm.sendMessageAsync("TLDR: describe the current situation orientation and positioning")}},{site:i,title:"TLDR",analytics:{manualTimeSavedMs:3e4},hotkeySequence:"t+l+d+r",run:async(e={})=>{await MineTm.sendMessageAsync("TLDR: describe what just happened in this chat, the current situation orientation, and our positioning. try not to use shallow bullet points")}},{site:i,title:"🚀 Check operational readiness",analytics:{manualTimeSavedMs:6e4},hotkeySequence:"c+o+r",subtitle:"Research to check current plan feasibility",run:async(e={})=>{await MineTm.sendMessageAsync('"""Operational readiness\nSurvey the lanscape and check operational readiness by researching and verifying all core aspects of our plan to see if we\'re in good shape. Use all plugins exhaustively as needed.\n"""',{append:!0,enablePlugins:!0})}},{site:i,title:"👾 Play world building",hotkeySequence:"p+w+b",analytics:{manualTimeSavedMs:6e4},subtitle:"Fullscreen engagement with the chat's images in real-time",run:async e=>{const t=await async function(){const e=window.fetch,t=(e,t)=>{const n=atob(e),a=new Uint8Array(n.length);for(let e=0;e<n.length;e++)a[e]=n.charCodeAt(e);return new Blob([a],{type:t})},n=e=>new Promise((t,n)=>{const a=new Image;a.crossOrigin="anonymous",a.onload=()=>t(a),a.onerror=n,a.src=e}),a=(e,t,n,a,s)=>{for(let i=0;i<a;i++){const a=new Uint8Array(e);for(let i=1;i<n-1;i++)for(let n=1;n<t-1;n++){const o=i*t+n;a[o]=s(e[o],e[o-1],e[o+1],e[o-t],e[o+t],e[o-t-1],e[o-t+1],e[o+t-1],e[o+t+1])}e=a}return e};return window.fetch=async function(s,i){const o=await e(s,i);if(!s.includes("streamGenerateContent")||!s.includes("gemini"))return o;const r=JSON.parse(i.body).contents||[];let l=null;for(let e=r.length-1;e>=0;e--){for(const t of r[e].parts||[])if(t.inlineData?.mimeType?.startsWith("image/")){l=t.inlineData;break}if(l)break}if(!l)return o;const c=o.body.getReader(),m=new TextDecoder;let[d,u,h]=["",null,[]];for(;;){const{done:e,value:t}=await c.read();if(e)break;h.push(t),d+=m.decode(t,{stream:!0});for(const e of d.split("\n"))if(e.startsWith("data: "))try{const t=JSON.parse(e.slice(6)).candidates?.[0]?.content?.parts?.[0]?.inlineData;t&&(u=t)}catch{}}if(!u)return new Response(new ReadableStream({start(e){h.forEach(t=>e.enqueue(t)),e.close()}}),{status:o.status,headers:o.headers});const g=URL.createObjectURL(t(l.data,l.mimeType)),p=URL.createObjectURL(t(u.data,u.mimeType)),y=await async function(e,t){const[s,i]=await Promise.all([n(e),n(t)]);if(s.width!==i.width||s.height!==i.height)return console.log(`[world builder] Dimension mismatch detected: Original (${s.width}x${s.height}) vs. New (${i.width}x${i.height}). Bypassing composite to prevent spatial distortion.`),t;const o=document.createElement("canvas"),r=o.getContext("2d",{willReadFrequently:!0});o.width=s.width,o.height=i.height,r.drawImage(s,0,0);const l=r.getImageData(0,0,o.width,o.height);r.drawImage(i,0,0);const c=r.getImageData(0,0,o.width,o.height),[m,d]=[o.width,o.height];let u=new Uint8Array(m*d),h=0;for(let e=5;e<d-5;e++)for(let t=5;t<m-5;t++){const n=4*(e*m+t),a=l.data[n]-c.data[n],s=l.data[n+1]-c.data[n+1],i=l.data[n+2]-c.data[n+2],o=Math.sqrt(a*a+s*s+i*i);u[e*m+t]=o>10?1:0,h+=u[e*m+t]}if(h/u.length>.7)return t;u=a(u,m,d,2,Math.min);const g=new Int32Array(m*d),p=new Map;let y=1;const f=(e,t)=>{const n=[e];let[a,s,i,o,r]=[0,m,d,0,0];for(;n.length;){const e=n.pop();if(g[e]||!u[e])continue;g[e]=t,a++;const[l,c]=[e%m,~~(e/m)];[s,i,o,r]=[Math.min(s,l),Math.min(i,c),Math.max(o,l),Math.max(r,c)],l>0&&n.push(e-1),l<m-1&&n.push(e+1),c>0&&n.push(e-m),c<d-1&&n.push(e+m)}return{sz:a,x1:s,y1:i,x2:o,y2:r}};for(let e=0;e<u.length;e++)u[e]&&!g[e]&&p.set(y,f(e,y++));u.fill(0);for(const[,e]of p)if(!(e.sz<100))for(let t=Math.max(0,e.y1-20);t<=Math.min(d-1,e.y2+20);t++)for(let n=Math.max(0,e.x1-20);n<=Math.min(m-1,e.x2+20);n++)u[t*m+n]=1;u=a(u,m,d,20,Math.max);const w=new Float32Array(u.length);for(let e=0;e<d;e++)for(let t=0;t<m;t++){let[n,a]=[0,0];for(let s=-6;s<=6;s++)for(let i=-6;i<=6;i++){const[o,r]=[t+i,e+s];o>=0&&o<m&&r>=0&&r<d&&(n+=u[r*m+o],a++)}w[e*m+t]=n/a}const b=r.createImageData(m,d);for(let e=0;e<l.data.length;e+=4){const t=w[e/4];b.data[e]=l.data[e]*(1-t)+c.data[e]*t,b.data[e+1]=l.data[e+1]*(1-t)+c.data[e+1]*t,b.data[e+2]=l.data[e+2]*(1-t)+c.data[e+2]*t,b.data[e+3]=255}return r.putImageData(b,0,0),new Promise(e=>o.toBlob(t=>e(URL.createObjectURL(t)),"image/png"))}(g,p),f=await(w=await fetch(y).then(e=>e.blob()),new Promise(e=>{const t=new FileReader;t.onloadend=()=>e(t.result.split(",")[1]),t.readAsDataURL(w)}));var w;return new Response(new ReadableStream({start(e){const t=new TextEncoder;for(const n of(h.map(e=>m.decode(e)).join("")+d).split("\n"))if(n.startsWith("data: "))try{const a=JSON.parse(n.slice(6));a.candidates?.[0]?.content?.parts?.[0]?.inlineData&&(a.candidates[0].content.parts[0].inlineData={mimeType:"image/jpeg",data:f}),e.enqueue(t.encode("data: "+JSON.stringify(a)+"\n\n"))}catch{e.enqueue(t.encode(n+"\n"))}else n&&e.enqueue(t.encode(n+"\n"));e.close()}}),{status:o.status,headers:o.headers})},()=>window.fetch=e}();await playSceneViewerAsync(),t()}},{site:i,title:"Send a text message",hotkeySequence:"s+a+m",analytics:{manualTimeSavedMs:5e3},subtitle:"Send a message (like if the main input isn't visible)",run:async(e={})=>{const t=prompt("Send a message:");t?.trim()&&await MineTm.sendMessageAsync(t,{append:!0})}},{site:i,title:"👾 Play world building | download all images as frames",analytics:{manualTimeSavedMs:6e4},run:async t=>{const n=document.querySelectorAll('[data-element-id="ai-response"] img, [data-element-id="user-message"] img');for(let a=0;a<n.length;a++){const s=n[a],i=document.createElement("canvas"),o=i.getContext("2d");i.width=s.naturalWidth||512,i.height=s.naturalHeight||512,o.drawImage(s,0,0),i.toBlob(e=>{const t=URL.createObjectURL(e),n=document.createElement("a");n.href=t,n.download=`frame-${String(a+1).padStart(3,"0")}.png`,document.body.appendChild(n),n.click(),document.body.removeChild(n),URL.revokeObjectURL(t)}),t?.setStatus(`💾 Downloaded frame ${a+1}/${n.length}`),await e.sleep(200)}}},{site:i,title:"🗑️ Destructive exit (safely)",hotkeySequence:"x+s",showHintNotToInteract:!0,analytics:{manualTimeSavedMs:8e3},run:async(t={})=>{const n="DELETION_OK";(await MineTm.sendMessageAsync(e.normalizeSpaceIndents(`\n            """System message\n            This chat is about to be deleted imminently.\n\n            You have two options:\n            * If there are any critical unresolved items/tasks/reminders, say so using the format: "UNRESOLVED: <msg>".\n            * Otherwise if this chat can be deleted with no loose threads, say "${n}".\n            """`),{returnAiResponse:!0})).includes(n)?await m():e.toastWarning("Not obviously safe to delete")}},{site:i,title:"Export conversation transcript",unsupportedPlatforms:[MineTm.CommandBarPlatforms.MOBILE],analytics:{manualTimeSavedMs:1e4},run:async(e={})=>{const t=await MineTm.getChatIndexedDbValueAsync(MineTm.getCurrentChatId());((e,t)=>{const n=new Blob([e],{type:"text/plain"}),a=URL.createObjectURL(n),s=document.createElement("a");s.href=a,s.download=t,s.click(),URL.revokeObjectURL(a)})(`[Title] ${t.chatTitle} (with ${t.model})\n\n`+t.messages.map(e=>`[${e.createdAt}] ${e.role}: ${MineTm.getIdbeMessageObjText(e)}`).join("\n\n"),`mine-chat-transcript-${t.id}.txt`)}},{site:i,title:"Delete everything except last exchange",hotkeySequence:"d+e+b+l",analytics:{manualTimeSavedMs:18e4},run:async e=>{const t=v.messages.findLastIndex(e=>"user"===e.role);if(t<0)throw"No user msg found";confirm("you sure u wanna del all but last?")&&(v.messages=v.messages.slice(t),await MineTm.setChatIndexedDbValueAsync(v),window.location.reload())}},{site:i,title:"Regenerate last response",analytics:{manualTimeSavedMs:6e5},run:async e=>{await MineTm.regenLastResponseAsync()}},{title:"🧬 Engage CTC strategy",analytics:{manualTimeSavedMs:3e4},hotkeySequence:"c+t+c",run:async()=>{const e="\"\"\"Iterative refinement\nLet's iteratively refine our strategy.\n\nShow our current strategy concisely in a text block (```taskpaper). If drafting a message, omit wrapping quotes.\n\nOnly include actionable items in the block, and keep rest outside it. If there's not enough context yet, write 'do nothing' in it. Keep block contents as concise as possible while maintaining high information density and efficacy.\n\nStyle in taskpaper format using tabs, omit bullets and trailing ':'s.\n\"\"\"";let t=!1;v&&(t=v.messages.slice(-1*((v.chatParams.contextLimit||1e15)-2)).find(t=>"user"===t.role&&t.content?.includes(e)));const n=t?'"""Iterative refinement\nShow the latest strategy\n"""':e;await MineTm.sendMessageAsync(n,{append:!0})}},...$,...P];return H},MineTm.Mine.CommandBar.serveGetCommandsFnAsync(MineTm.CommandBar.getCommands)};main().then(),window.__sceneViewerInstance=null;const requestFullscreen=async(e=document.documentElement)=>{try{e.requestFullscreen?await e.requestFullscreen():e.webkitRequestFullscreen?await e.webkitRequestFullscreen():e.msRequestFullscreen&&await e.msRequestFullscreen()}catch(e){console.error("Fullscreen request failed:",e)}},exitFullscreen=async()=>{try{document.exitFullscreen?await document.exitFullscreen():document.webkitExitFullscreen?await document.webkitExitFullscreen():document.msExitFullscreen&&await document.msExitFullscreen()}catch(e){console.error("Exit fullscreen failed:",e)}},playSceneViewerAsync=()=>new Promise(async e=>{if(window.__sceneViewerInstance)return window.__sceneViewerInstance.destroy;const t={};window.__sceneViewerInstance=t;const n=document.createElement("div");n.style.cssText="\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100vw;\n    height: 100vh;\n    background: #000;\n    z-index: 999999;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    opacity: 0;\n    transition: opacity 0.5s ease-in-out;\n    cursor: pointer;\n  ";const a=document.createElement("div");a.style.cssText="\n    position: relative;\n    width: calc(100vw - 20px);\n    height: calc(100vh - 20px);\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  ",n.appendChild(a);const s=document.createElement("div");s.textContent="create a scene to begin",s.style.cssText="\n    color: #666;\n    font-size: 24px;\n    font-family: -apple-system, system-ui;\n    letter-spacing: 0.5px;\n    opacity: 0;\n    transition: opacity 0.5s ease-in-out;\n    position: absolute;\n    z-index: 10;\n    pointer-events: none;\n    display: none;\n  ",a.appendChild(s);let i=null,o=[],r=-1,l=null,c=!1,m=null,d=!1,u=new Set;const h=()=>{s.style.display="block",s.style.opacity="1",s.style.pointerEvents="none"},g=e=>{if(!e||e===i?.src)return;(()=>{s.style.opacity="0";const e=setTimeout(()=>{c||(s.style.display="none"),u.delete(e)},500);u.add(e)})();const t=(e=>{const t=document.createElement("img");return t.style.cssText="\n      position: absolute;\n      max-width: 100%;\n      max-height: 100%;\n      object-fit: contain;\n      opacity: 0;\n      transition: opacity 0.4s cubic-bezier(0.4, 0, 0.2, 1), box-shadow 0.3s ease-in-out;\n      cursor: default;\n      will-change: opacity, box-shadow;\n      border-radius: 16px;\n    ",t.onload=t.onerror=()=>{t.onload=t.onerror=null},t.src=e,t.onclick=e=>e.stopPropagation(),t})(e);if(a.appendChild(t),requestAnimationFrame(()=>{c||(t.style.opacity="1",d&&r===o.length-1&&(t.style.boxShadow="0 0 20px 0 rebeccapurple"))}),i){const e=i,t=setTimeout(()=>{e.parentNode&&e.remove(),e.onclick=null,e.src="",u.delete(t)},450);u.add(t)}i=t},p=e=>{if(0===o.length)return;let t=r;if("left"===e&&r>0?t=r-1:"right"===e&&r<o.length-1&&(t=r+1),t!==r){r=t;const e=o[r];e&&e.src&&g(e.src)}},y=()=>Mine.qsaa(`${MineTm.finalizedResponseBlocksQs} [data-element-id="ai-response"] img, [data-element-id="user-message"] img, [data-element-id="response-block"]:has([d="M9,9c-2.764,0-5.274,1.636-6.395,4.167-.257,.58-.254,1.245,.008,1.825,.268,.591,.777,1.043,1.399,1.239,1.618,.51,3.296,.769,4.987,.769s3.369-.259,4.987-.769c.622-.196,1.132-.648,1.399-1.239,.262-.58,.265-1.245,.008-1.825-1.121-2.531-3.631-4.167-6.395-4.167Z"]) img`),f=e=>{c||("Escape"===e.key?w():"ArrowLeft"===e.key?(e.preventDefault(),p("left")):"ArrowRight"===e.key&&(e.preventDefault(),p("right")))},w=()=>{c||(c=!0,window.__sceneViewerInstance=null,m&&(clearInterval(m),m=null),u.forEach(e=>clearTimeout(e)),u.clear(),document.removeEventListener("keydown",f),i&&(i.onclick=null,i.onload=null,i.onerror=null,i.src="",i=null),o=[],l=null,n.style.opacity="0",setTimeout(()=>{n.parentNode&&n.remove(),n.onclick=null,exitFullscreen()},500),e())};return t.destroy=w,n.onclick=e=>{e.target!==n&&e.target!==a||w()},document.addEventListener("keydown",f),document.body.appendChild(n),requestAnimationFrame(()=>{c||(n.style.opacity="1",(()=>{const e=y();o=[],e.forEach(e=>{e.src&&e.src.match(/^(data:image\/|blob:|https?:\/\/)/)&&o.push(e)}),o.length>0?(r=o.length-1,l=o[r],g(l.src)):h()})(),requestFullscreen())}),m=setInterval(()=>{if(c)return;const e=!!MineTm.getStopButton();e!==d&&(d=e,i&&r===o.length-1&&(i.style.boxShadow=e?"0 0 20px 0 rebeccapurple":"none"));const t=y().filter(e=>e.src&&e.src.match(/^(data:image\/|blob:|https?:\/\/)/));if(t.length<o.length)return o=[...t],0===o.length?(r=-1,l=null,void h()):(r=Math.min(r,o.length-1),r<0&&(r=0),l=o[r],void g(l.src));const n=t[t.length-1];n?n!==l&&-1===o.indexOf(n)&&(o.push(n),r=o.length-1,l=n,g(n.src)):0===o.length&&h()},100),w});